install-package("KernSmooth")
install.packages("KernSmooth")
library(KernSmooth)
install.packages("swirl")
library(swirl)
swirl()
bye()
install_from_swirl("R Programming")
swirl()
5 + 7
x ,_ 5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9, 3.14)
?c
z
c(z, 555, z)
z * 2 + 100
my_sqrt <- sqrt(z - 1)
my_sqrt
my_div <- z / my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z * 2 + 100
z * 2 + 1000
my_div
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R", "mytest2.R")
file.copy("mytest2.R", "mytest3.R")
file.path("mytest3.R")
args(file.path)
file.path("folder1", "folder2")
?dir.create
dir.create(file.path("testdir2", "testdir3"))
dir.create(file.path("testdir2", "testdir3"), recursive = TRUE)
setwd(old.dir)
1"20"
1:20
pi:20
pi:10
15:1
?`:`
seq(1, 20)
seq(0, 10, by=0.5)
my_seq <- seq(5, 10, length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0, 1, 2) times = 10)
rep(c(0, 1, 2), times = 10)
rep(c(0, 1, 2), each = 10)
install.packages("swirl")
library(swirl)
swirl()
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_car, "Jonathan")
my_name <- c(my_char, "Jonathan")
my_name
paste(my_name, " ")
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(1:3,c("X", "Y", "Z"), sep="")
paste(LETTERS, 1:4, sep ="-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
1/0
0/0
Inf - Inf
getwd()
file.path(getwd(), "Coursera", "Intro to R", "Specdata")
file.path(getwd(), "Coursera", "Intro to R", "specdata")
vars <- 1:332
formatC(vars, width = 6, format = "d", flag = "0")
formatC(vars, width = 3, format = "d", flag = "0")
formatC(vars[0], width = 3, format = "d", flag = "0")
formatC(vars[1], width = 3, format = "d", flag = "0")
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- vector(length(id))
for(i in seq_along(id)){
filepath <- file.path(directory, c(formatC(i, width = 3, format = "d", flag = "0"), ".csv"))
file <- read.csv(filepath)
means[i] <- mean(file[pollutant], na.rm = true)
}
mean(means)
}
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- vector(mode = "numeric", length(id))
for(i in seq_along(id)){
filepath <- file.path(directory, c(formatC(i, width = 3, format = "d", flag = "0"), ".csv"))
file <- read.csv(filepath)
means[i] <- mean(file[pollutant], na.rm = true)
}
mean(means)
}
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate")
filepath <- file.path(directory, c(formatC(vars[1], width = 3, format = "d", flag = "0"), ".csv"))
file.path(getwd(), "Coursera", "Intro to R", "specdata")
filepath <- file.path(file.path(getwd(), "Coursera", "Intro to R", "specdata"), c(formatC(vars[1], width = 3, format = "d", flag = "0"), ".csv"))
filepath
filepath <- file.path(file.path(getwd(), "Coursera", "Intro to R", "specdata"), paste(formatC(vars[1], width = 3, format = "d", flag = "0"), ".csv"))
filepath
filepath <- file.path(file.path(getwd(), "Coursera", "Intro to R", "specdata"), paste(formatC(vars[1], width = 3, format = "d", flag = "0"),".csv"))
filepath
filepath <- file.path(file.path(getwd(), "Coursera", "Intro to R", "specdata"), formatC(vars[1], width = 3, format = "d", flag = "0"))
filepath
filepath <- file.path(file.path(getwd(), "Coursera", "Intro to R", "specdata"), paste(formatC(vars[1], width = 3, format = "d", flag = "0"),".csv", sep=""))
filepath
source('~/Coursera/Intro to R/Week2.R')
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- vector(mode = "numeric", length(id))
for(i in seq_along(id)){
filepath <- file.path(directory, paste(formatC(vars[1], width = 3, format = "d", flag = "0"),".csv", sep=""))
file <- read.csv(filepath)
means[i] <- mean(file[pollutant], na.rm = true)
}
mean(means)
}
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- vector(mode = "numeric", length(id))
for(i in seq_along(id)){
filepath <- file.path(directory, paste(formatC(vars[1], width = 3, format = "d", flag = "0"),".csv", sep=""))
file <- read.csv(filepath)
file
means[i] <- mean(file[pollutant], na.rm = true)
means[i]
}
mean(means)
}
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate", 1)
id <- 1
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate", id)
filepath <- file.path(file.path(getwd(), "Coursera", "Intro to R", "specdata"), paste(formatC(vars[1], width = 3, format = "d", flag = "0"), ".csv", sep=""))
filepath
file <- read.csv(filepath)
file
file["sulfate"]
mean(file["sulfate"], na.rm = TRUE)
mean(file["sulfate"])
file["sulfate"]
mean(file["sulfate"])
mean(file$sulfate, na.rm = TRUE)
file[["sulfate"]]
mean(file[["sulfate"]], na.rm = TRUE)
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- vector(mode = "numeric", length(id))
for(i in seq_along(id)){
filepath <- file.path(directory, paste(formatC(vars[1], width = 3, format = "d", flag = "0"),".csv", sep=""))
file <- read.csv(filepath)
means[i] <- mean(file[[pollutant]], na.rm = true)
}
mean(means)
}
file <- read.csv(filepath
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- vector(mode = "numeric", length(id))
for(i in seq_along(id)){
filepath <- file.path(directory, paste(formatC(vars[1], width = 3, format = "d", flag = "0"),".csv", sep=""))
file <- read.csv(filepath)
means[i] <- mean(file[[pollutant]], na.rm = TRUE)
}
mean(means)
}
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- vector(mode = "numeric", length(id))
for(i in seq_along(id)){
filepath <- file.path(directory, paste(formatC(vars[1], width = 3, format = "d", flag = "0"),".csv", sep=""))
file <- read.csv(filepath)
means[i] <- mean(file[[pollutant]], na.rm = TRUE)
means[i]
}
mean(means)
}
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate")
pollutantmean <- function(directory, pollutant, id = 1:332) {
means <- vector(mode = "numeric", length(id))
for(i in seq_along(id)){
filepath <- file.path(directory, paste(formatC(i, width = 3, format = "d", flag = "0"),".csv", sep=""))
file <- read.csv(filepath)
means[i] <- mean(file[[pollutant]], na.rm = TRUE)
}
mean(means)
}
pollutantmean(file.path(getwd(), "Coursera", "Intro to R", "specdata"), "sulfate")
library(datasets)
data(iris)
?iris
iris
iris[iris$Species == "virginica",]
rowMeans(iris[iris$Species == "virginica",], na.rm = TRUE)
apply(iris[iris$Species == "virginica",], 1, mean)
apply(iris[iris$Species == "virginica",], 1, mean, na.rm = TRUE)
apply(iris[iris$Species == "virginica",], 2, mean, na.rm = TRUE)
iris
factors <- gl(3, 50, labels = c("setosa","versicolor","virginica"))
split(iris, factors)
tapply(iris, factors, mean)
iris[iris$Species == "virginica", iris$Sepal.Length]
iris[iris$Species == "virginica", ]
iris[iris$Species == "virginica", "Sepal.Length"]
mean(iris[iris$Species == "virginica", "Sepal.Length"])
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
colMeans(iris)
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
?mtcars
sapply(mtcars, cyl, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
mean(mtcars$mpg, mtcars$cyl)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
lapply(mtcars, mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
debug(ls)
ls
ls()
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
undebug(ls)
con <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(con)
nchar(htmlCode[10])
nchar(htmlCode[20])
nchar(htmlCode[30])
nchar(htmlCode[100])
url2 <- url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
fwf <- read.fwf(url2, header = true, skip=2)
fwf <- read.fwf(url2, skip=4, widths= c(16, 13, 13, 13, 8))
head(fwf)
fwf <- read.fwf(url2, skip=4, widths= c(10, 9, 4, 9, 4, 9, 4, 9, 4))
close(url2)
fwf <- read.fwf(url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"), skip=4, widths= c(10, 9, 4, 9, 4, 9, 4, 9, 4))
head(fwf)
sum(fwf[,4])
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
bye()
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cram, r_arch:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time())
select(cran, -time
select(cran, -time)
select(cran, -5:29)
select(cran, -5:20)
select(cran, -5:-20)
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version == "3.1.1", country == "US")
?comparison
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
!is.na(c(3, 5, NA, 10))
filter(cran, !is.na(r_rversion))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran, desc(ip_id))
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library("swirl")
rm(list=ls())
install_from_swirl("Exploratory Data Analysis")
swirl()
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
install.packages("markdown")
library(markdown)
getwd()
setwd("Coursera/Reproducible Research/CourseProject1/")
getwd()
zip.file.extract("activity.csv", "activity.zip")
unzip("activity.zip")
